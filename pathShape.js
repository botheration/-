var path1 = ["249.40772532188842,131.84549356223175,c", "246.11158798283262,131.84549356223175,c", "240.61802575107296,136.2403433476395,c", "235.1244635193133,141.73390557939916,c", "229.63090128755366,148.3261802575107,c", "227.43347639484978,153.81974248927037,c", "225.23605150214593,160.41201716738198,c", "224.137339055794,165.90557939914163,c", "224.137339055794,170.30042918454933,c", "224.137339055794,175.79399141630904,c", "224.137339055794,180.18884120171674,c", "226.33476394849785,184.58369098712444,c", "236.22317596566523,187.87982832618025,c", "257.09871244635195,192.27467811158795,c", "269.18454935622316,193.3733905579399,c", "276.8755364806867,193.3733905579399,c", "280.17167381974247,193.3733905579399,c", "282.3690987124464,191.17596566523605,c", "284.5665236051502,187.87982832618025,c", "286.7639484978541,183.48497854077254,c", "290.0600858369099,179.0901287553648,c", "292.2575107296137,175.79399141630904,c", "292.2575107296137,171.39914163090128,c", "293.3562231759657,167.00429184549358,c", "293.3562231759657,160.41201716738198,c", "293.3562231759657,157.11587982832617,c", "293.3562231759657,152.72103004291847,c", "293.3562231759657,149.42489270386267,c", "293.3562231759657,147.22746781115882,c", "292.2575107296137,143.931330472103,c", "291.1587982832618,141.73390557939916,c", "285.6652360515021,137.3390557939914,c", "282.3690987124464,137.3390557939914,c", "274.6781115879828,134.0429184549356,c", "272.48068669527896,134.0429184549356,c", "270.2832618025751,134.0429184549356,c", "266.9871244635193,134.0429184549356,c", "262.5922746781116,132.9442060085837,c", "260.3948497854077,131.84549356223175,c", "258.19742489270385,131.84549356223175,c", "254.90128755364807,131.84549356223175,c", "252.7038626609442,131.84549356223175,c"] //自由形状
var path2 = ["129.6480686695279,259.2961373390558,c", "193.3733905579399,259.2961373390558,c", "193.3733905579399,370.2660944206009,c", "129.6480686695279,370.2660944206009,c"] //矩形
var path3 = ["326.86695278969955,283.4678111587983,c", "360.160005393741,281.80550922849295,c", "387.696386744656,277.1060305428656,c", "404.7148063467003,270.18195766008483,c", "408.27262484319186,262.2305256848108,c", "397.7546630943211,254.62660944206013,c", "374.9795722391504,248.68499512961478,c", "343.8853723917438,245.43304183996807,c", "309.84853318765533,245.43304183996807,c", "278.7543333402487,248.68499512961478,c", "255.97924248507803,254.6266094420601,c", "245.46128073620724,262.2305256848108,c", "249.0190992326988,270.18195766008483,c", "266.0375188347431,277.1060305428656,c", "293.5739001856581,281.80550922849295,c"] //椭圆
var path4 = ["377.9570815450644,238.96995708154503,c", "386.0010405634905,233.88806260889723,c", "392.65412599055725,219.52108491283656,c", "396.7659589145411,198.35320495690675,c", "397.62556606805583,174.04454148964038,c", "395.08431356497294,150.79828326180257,c", "389.5816070496297,132.63391950661253,c", "382.06891446904825,122.69223373540684,c", "373.84524862108054,122.69223373540686,c", "366.33255604049907,132.63391950661253,c", "360.82984952515585,150.79828326180254,c", "358.28859702207296,174.04454148964035,c", "359.1482041755877,198.35320495690675,c", "363.26003709957155,219.52108491283656,c", "369.9131225266383,233.88806260889723,c"] //椭圆

function pathShape (pointArr) {
  let shape = 'freehand'
  if (pointArr.length === 4) {
    if (pathOfRect(pointArr)) {
      shape = 'rect'
    }
  } else {
    if (pathOfEllipse(pointArr, 3)) {
      shape = 'ellipse'
    }
  }
  return shape

  /**
   * 路径是不是矩形
   * return true 矩形 false 非矩形
   */
  function pathOfRect (pointArr) {
    const points = []
    for (let i = 0; i < pointArr.length; i++) {
      const point = pointArr[i].split(',')
      const pointObj = {
        x: point[0],
        y: point[1]
      }
      points.push(pointObj)
    }
    // 计算对角线
    // 第一个点和第三个点
    const line13 = Math.sqrt(Math.pow(points[0].x - points[2].x, 2) + Math.pow(points[0].y - points[2].y, 2))
    // 第二个点和第四个点
    const line24 = Math.sqrt(Math.pow(points[1].x - points[3].x, 2) + Math.pow(points[1].y - points[3].y, 2))
    if (line13 === line24) {
      return true
    } else {
      return false
    }
  }

  /**
   * 路径是不是椭圆
   * @param step 随机数的步长
   * return true 椭圆 false 非椭圆
   */
  function pathOfEllipse (pointArr, step) {
    let xArr = []
    let yArr = []
    const randomPoint = []
    const constantsArr = []
    for (let i = 0; i < pointArr.length; i++) {
      const point = pointArr[i].split(',')
      xArr.push(point[0])
      yArr.push(point[1])
      if (i % step === 0) {
        randomPoint.push({
          x: point[0],
          y: point[1]
        })
      }
    }

    const extremumPoint = {
      xMin: Math.min.apply(null, xArr),
      xMax: Math.max.apply(null, xArr),
      yMin: Math.min.apply(null, yArr),
      yMax: Math.max.apply(null, yArr)
    }

    // 计算x,y方向的半径
    const radius = {
      xAxis: (extremumPoint.xMax - extremumPoint.xMin) / 2,
      yAxis: (extremumPoint.yMax - extremumPoint.yMin) / 2
    }

    const center = {
      x: extremumPoint.xMin + radius.xAxis,
      y: extremumPoint.yMin + radius.yAxis
    }

    /* This is a more general form of the circle equation
    *
    * X^2/a^2 + Y^2/b^2 < 1 椭圆内
    * X^2/a^2 + Y^2/b^2 = 1 椭圆上
    * X^2/a^2 + Y^2/b^2 > 1 椭圆外
    */
    for (let i = 0; i < randomPoint.length; i++) {
      const normalized = {
        x: randomPoint[i].x - center.x,
        y: randomPoint[i].y - center.y
      }
      const constant = (normalized.x * normalized.x) / (radius.xAxis * radius.xAxis) + (normalized.y * normalized.y) / (radius.yAxis * radius.yAxis)
      constantsArr.push(parseInt(constant))
    }

    for (let i = 0; i < constantsArr.length; i++) {
      if (constantsArr[i] !== 1) {
        return false
      }
    }
    return true
  }
}
